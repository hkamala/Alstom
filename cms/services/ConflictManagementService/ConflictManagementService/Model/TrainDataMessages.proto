////////////////////////////////////////////////////////////////////////////////
// Protocol Buffers definition for train list messages
////////////////////////////////////////////////////////////////////////////////
syntax = "proto3";

package TrainData;

////////////////////////////////////////////////////////////////////////////////

enum EUpdateMode { STATIC_FIRST = 0; STATIC = 1; STATIC_LAST = 2; DYNAMIC = 3; }
enum EDirection { UNKNOWN = 0; NOMINAL = 1; OPPOSITE = 2; BOTH = 3; }

////////////////////////////////////////////////////////////////////////////////
// Property for various items 

message Property
{
	enum EPropertyType { UNKNOWN = 0; TMS_TT_OBJECT = 1; TMS_TRIP_OBJECT = 2; INTEGER = 3; BOOLEAN = 4; STRING = 5; REAL = 6; BIT_VECTOR = 7; TIMESTAMP = 8; }

	string name = 1;
	string value = 2;
	EPropertyType type = 3;
	bool valid = 4;
}

////////////////////////////////////////////////////////////////////////////////
// Train position

message MovementController
{
	enum EMovementControl { TDS = 0; CBTC = 1; EXTERNAL = 2; }

	EMovementControl movement_controller = 1;
	bool can_control_movement = 2;
	uint32 movement_agreement = 3;
	string sender = 4;
	string owner = 5;
}

message TrainPosition
{
	message ElementExtension
	{
		uint32 start_distance = 1;
		uint32 end_distance = 2;
		EDirection start_direction = 3;
		EDirection end_direction = 4;
		repeated uint32 element = 5;
		repeated uint32 valid_object_type = 6;
		bool modified = 7;
		repeated string element_str = 8;
	}

	ElementExtension footprint = 1;
	ElementExtension virtual_occupancy = 2;
	ElementExtension propagation = 3;
}

////////////////////////////////////////////////////////////////////////////////
// One describer (train) data

message DescriberWithConsist
{
	enum EDescriberAction { CREATE = 0; CHANGE = 1; REMOVE = 2; }

	message Describer
	{
		enum EDescriberType { SEQUENCE = 0; TRAIN = 1; }

		message Train
		{
			message TrainDynInfo
			{
				int32 train_status = 1;
				int32 deviation = 2;
			}

			uint32 id = 1;
			string describer = 2;
			string description = 3;
			string opername = 4;
			string sysname = 5;
			EDirection oriented_direction = 6;
			EDirection stepping_direction = 7;
			TrainDynInfo dynamic_info = 8;
			repeated Property train_property = 9;
		}

		message ExternalTrain
		{
			enum EJourneyType { UNDEFINED = 0; COMMERCIAL = 2; INJECTION = 3; WITHDRAWAL = 4; TRAINING = 5; TRIALS = 6; HLP = 7; WITHOUT_TYPE = 8;
							  NON_COMMERCIAL = 9; COMMERCIAL_HEADWAY = 10; NON_COMMERCIAL_HEADWAY = 11; DEGRADED = 12; OPENING_INJECTION = 13;
							  OPENING_COMMERCIAL = 14; GOING_TO_COMMERCIAL_TIMETABLED = 15; }

			string guid = 1;
			string external_train = 2;
			uint32 external_train_id = 3;
			uint32 journey_id = 4;
			EJourneyType journey_type = 5;
			int32 journey_seqno = 6;
			bool user_created = 7;
			string vehicle_id = 8;
			uint32 destination_id = 9;
			string destination = 10;
			repeated Property external_train_property = 11;
		}

		Train train = 1;
		ExternalTrain external_train = 2;
		EDescriberType describer_type = 3;
		uint32 queue_id = 4;
		uint32 tds_id = 5;
		uint64 dynamic_bits = 6;
		uint64 time_stamp_of_head_moving = 7;
		TrainPosition train_position = 8;
		MovementController movement_controller = 9;
        TrainPosition train_position_core = 10;
        TrainPosition train_position_segment = 11;
		int64 km_value = 12;	// Temporary for RJ TMS, will be removed!
	}

	message TrainConsist
	{
		message Vehicle
		{
			uint32 vehicle_id = 1;
			string vehicle_name = 2;
			repeated Property vehicle_property = 3;
		}

		uint32 active_vehicle_id = 1; 
		repeated Vehicle vehicle = 2;
	}

	message TrainDynamicTimingInfo
	{
		enum ETrainMovementState { UNKNOWN = 0; MOVING = 1; STOPPED_AT_STATION = 2; STOPPED_ON_LINE_DUE_TO_SIGNALLING = 3; STOPPED_ON_LINE_DUE_TO_OTHER_REASON_THAN_SIGNALLING = 4; }

		message TrainDynamicStationInfo
		{
			enum ETrafficEvent { UNDEFINED = 0; ARRIVAL = 1; DEPARTURE = 2; }

			uint32 station_id = 1;
			uint32 platform_id = 2;
			ETrafficEvent traffic_event = 3;
			uint64 planned_time = 4;
			uint32 schedule_id = 5;
			uint32 next_schedule_id = 6;
			uint64 occurred_time = 7;
			uint64 regulated_time = 8;
			uint64 next_planned_departure_time_to_comply_with = 9;
		}

		ETrainMovementState movement_state = 1;
		TrainDynamicStationInfo next_station_info = 2;
		repeated TrainDynamicStationInfo last_station_info = 3;
	}

	EDescriberAction action = 1;
	Describer describer = 2;
	TrainConsist train_consist = 3;
	TrainDynamicTimingInfo dynamic_timing_info = 4;
}

////////////////////////////////////////////////////////////////////////////////
// Actual messages delivered in train data session
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// List of describers

message DescriberWithConsistList
{
	EUpdateMode update_mode = 1;
	repeated DescriberWithConsist describer = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Train movement

message TrainMovement
{
	uint32 id = 1;
	EDirection direction = 2;
	uint64 occurred_time = 3;
	TrainPosition position = 4;
	MovementController movement_controller = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Train command transaction

enum ETrainCommand { SET = 0; REPLACE = 1; REMOVE = 2; MOVE = 3; EXCHANGE = 4; SPLIT = 5; JOIN = 6; }

message TrainIdentity
{
	message ExternalIdentity
	{
		string external_system = 1;
		string identity = 2;
	}

	uint32 sysid = 1;
	string guid = 2;
    string describer = 3;
	repeated ExternalIdentity external_identity = 4;
}

message TrainCommandStarting
{
	uint32 transaction_id = 1;
	ETrainCommand train_command = 2;
	repeated TrainIdentity train_identity = 3;	// 0 to 2 train identities, depending on command (0 for SET, 2 for EXCHANGE and JOIN)
}

message TrainCommandEnded
{
	enum ETrainCommandStatus { FAIL = 0; SUCCESS = 1; }

	uint32 transaction_id = 1;
	ETrainCommand train_command = 2;
	repeated TrainIdentity train_identity = 3;	// 0 to 2 train identities, depending on command (0 for FAIL and REMOVE, 2 for EXCHANGE and SPLIT)
	ETrainCommandStatus status = 4;
}

////////////////////////////////////////////////////////////////////////////////
// Train properties setting (with optional alarm) from external system

message SetAlarmingTrainProperties
{
	message AlarmingTrainProperty
	{
		// Note: Other than ALARMNOTSET are alarming train properties!
		enum ETrainPropertyAlarm { NOALARM = 0; EVENT = 1; NOTIFY = 2; WARNING = 3; ALARM = 4; CRITICALALARM = 5; ALARMNOTSET = 99; }

		Property train_property = 1;
		ETrainPropertyAlarm alarm = 2;
	}

	// Train identified either by SYSID or SYSNAME (or both)
	uint32 sysid = 1;
	string sysname = 2;
	repeated AlarmingTrainProperty train_properties = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Ctc event from external system (may include train)

message SendEventOrAlarm
{
	// Possible train identified either by SYSID or SYSNAME (or both)
    // If event is not for train, these should be set to 0 and ""
	uint32 sysid = 1;
	string sysname = 2;
    // Event key and parameters
    string key = 3;
    string str1 = 4;
    string str2 = 5;
    uint32 uint1 = 6;
    uint32 uint2 = 7;
    uint32 sysid1 = 8;
    uint32 sysid2 = 9;
    bool success = 10;
    uint32 logId = 11;
    uint32 actorId = 12;
}

////////////////////////////////////////////////////////////////////////////////
// End of definitions
////////////////////////////////////////////////////////////////////////////////
